services:
  back:
    depends_on:
      postgres:
        condition: service_healthy
    build: 
      context: ./back/.
    #image: ghcr.io/sir-lorrak/note-backend:latest
    container_name: node_app
    environment: 
      HOST: ${NODEHOST}
      HOSTNAME: ${NODEHOSTNAME}
      # postgres connection information
      PGUSER: ${PGUSER}
      PGHOST: postgres
      PGPASSWORD: ${PGPASSWORD}
      PGDATABASE: ${PGDB}
      PGPORT: ${PGPORT}
      # password for admin user
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
    networks:
      - app-network
      - traefik
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`${DOMAIN}`) && ( PathPrefix(`/api`) || PathPrefix(`/docs`) )"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls=true"
      #- "traefik.http.routers.backend.tls.certresolver=cloudflare_nl"
      - "com.centurylinklabs.watchtower.scope=httpapi"

  front:
    depends_on:
      - back
    build:
      context: ./front/.
    #image: ghcr.io/sir-lorrak/note-frontend:latest
    container_name: nginx_server
    networks:
      - app-network
      - traefik
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"
      #- "traefik.http.routers.frontend.tls.certresolver=cloudflare_nl"
      - "com.centurylinklabs.watchtower.scope=httpapi"

  postgres:
    container_name: postgres
    restart: always
    image: postgres
    ports:
      - ${PGPORT}:${PGPORT}
    environment:
      POSTGRES_USER: ${PGUSER}
      POSTGRES_PASSWORD: ${PGPASSWORD}
      POSTGRES_DB: ${PGDB}
    networks:
      - app-network
    volumes:
      - postgres:/data/postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${PGDB} -U ${PGUSER}"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 20s

  traefik:
    image: traefik:v3.5
    container_name: traefik
    restart: unless-stopped
    environment:
      - CF_DNS_API_TOKEN=${CLOUDFLARE_API_TOKEN}
    command:
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.network=traefik
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entryPoint.permanent=true
      - --entrypoints.websecure.address=:443
      #- --entrypoints.websecure.http.tls.domains[0].main=${DOMAIN}
      #- --entrypoints.websecure.http.tls.domains[0].sans=*.${DOMAIN}
      #- --certificatesResolvers.cloudflare_nl.acme.email=${CLOUDFLARE_EMAIL}
      #- --certificatesResolvers.cloudflare_nl.acme.storage=/data/acme/acme.json
      #- --certificatesResolvers.cloudflare_nl.acme.dnsChallenge.provider=cloudflare
      #- --certificatesResolvers.cloudflare_nl.acme.dnsChallenge.propagation.delayBeforeChecks=120
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.justAdummyService.loadbalancer.server.port=1337"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls=true"
      #- "traefik.http.routers.traefik.tls.certresolver=cloudflare_nl"
      - "traefik.http.routers.traefik.service=api@internal"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik:/data/
    networks:
      - traefik

  # watchtower:
  #   image: containrrr/watchtower
  #   container_name: watchtower
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   environment:
  #     - WATCHTOWER_HTTP_API_UPDATE=true
  #     - WATCHTOWER_HTTP_API_TOKEN=${WATCHTOWER_HTTP_API_TOKEN}
  #     - TZ=Europe/Paris
  #     - WATCHTOWER_CLEANUP=true
  #     - DOCKER_API_VERSION=1.43
  #     - WATCHTOWER_SCHEDULE=0 0 5 * * *
  #     - WATCHTOWER_TIMEOUT=5m
  #     - WATCHTOWER_SCOPE=httpapi
  #     - WATCHTOWER_DEBUG=true
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.watchtower.rule=Host(`watchtower.${DOMAIN}`)"
  #     - "traefik.http.routers.watchtower.entrypoints=websecure"
  #     - "traefik.http.routers.watchtower.tls.certresolver=cloudflare_nl"
  #     - "com.centurylinklabs.watchtower.scope=httpapi"
  #   networks:
  #     - traefik

  ### Used to update containers not updated via http api
  # watchtower-daily:
  #   container_name: watchtower-daily
  #   image: containrrr/watchtower
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   environment:
  #   - TZ=Europe/Paris
  #   - WATCHTOWER_CLEANUP=true
  #   - DOCKER_API_VERSION=1.43
  #   - WATCHTOWER_SCHEDULE=0 0 5 * * *
  #   - WATCHTOWER_TIMEOUT=5m
  #   - WATCHTOWER_SCOPE=none
  #   restart: always
  #   networks:
  #     - main

volumes:
  postgres:
  traefik:

networks:
  app-network:
    name: app-network
    driver: bridge
  traefik:
    name: traefik
    driver: bridge